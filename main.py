import logging
from flask import Flask
import telebot
from datetime import datetime
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
DATA_FILE = 'user_data.json'
ADMIN_ID = YOUR_ADMIN_TELEGRAM_ID  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

users = load_data()

# === –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=['start'])
def start(message):
    uid = str(message.from_user.id)
    if uid not in users:
        users[uid] = {
            'start_date': datetime.today().strftime('%Y-%m-%d'),
            'best_streak': 0,
            'current_streak': 0,
            'relapses': 0,
            'last_report': None
        }
        save_data(users)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è. –ü–∏—à–∏ "–î–µ–Ω—å 1", "–î–µ–Ω—å 2" –∏ —Ç.–¥.')

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å –ø—É—Ç—å
/my - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/restart - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

@bot.message_handler(commands=['my'])
def my_status(message):
    uid = str(message.from_user.id)
    if uid not in users:
        return bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
    user = users[uid]
    bot.send_message(message.chat.id, f"üß† –î–µ–Ω—å: {user['current_streak']}
üìà –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user['best_streak']}
‚ùå –°—Ä—ã–≤–æ–≤: {user['relapses']}")

@bot.message_handler(commands=['restart'])
def restart(message):
    uid = str(message.from_user.id)
    if uid in users:
        users[uid]['current_streak'] = 0
        users[uid]['start_date'] = datetime.today().strftime('%Y-%m-%d')
        users[uid]['last_report'] = None
        save_data(users)
    bot.send_message(message.chat.id, "üîÅ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ!")

@bot.message_handler(commands=['adminlog'])
def admin_log(message):
    if message.from_user.id != ADMIN_ID:
        return
    report = ""
    for uid, data in users.items():
        report += f"ID: {uid}, –î–µ–Ω—å: {data['current_streak']}, –õ—É—á—à–∏–π: {data['best_streak']}, –°—Ä—ã–≤—ã: {data['relapses']}
"
    bot.send_message(message.chat.id, report or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
@bot.message_handler(func=lambda m: True)
def catch_text(message):
    uid = str(message.from_user.id)
    text = message.text.lower().strip()
    if '—Å–æ—Ä–≤–∞–ª—Å—è' in text:
        if uid in users:
            users[uid]['relapses'] += 1
            users[uid]['current_streak'] = 0
            save_data(users)
            return bot.send_message(message.chat.id, "üò¢ –°—Ä—ã–≤ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è.")
    elif '–¥–µ–Ω—å' in text:
        digits = ''.join([c for c in text if c.isdigit()])
        if digits:
            day = int(digits)
            if uid in users:
                users[uid]['current_streak'] = day
                users[uid]['best_streak'] = max(users[uid]['best_streak'], day)
                users[uid]['last_report'] = datetime.today().strftime('%Y-%m-%d')
                save_data(users)
                return bot.send_message(message.chat.id, f"‚úÖ –î–µ–Ω—å {day} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ ¬´–î–µ–Ω—å 3¬ª –∏–ª–∏ ¬´–Ø —Å–æ—Ä–≤–∞–ª—Å—è¬ª")

# === FLASK –î–õ–Ø RENDER ===
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return 'ok'

if __name__ == '__main__':
    bot.polling()
